#include <utility>
#include <GL/glut.h>
#include <GL/freeglut.h>
#include <math.h>
#include <iostream> 
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <SOIL/SOIL.h>
#include "TwoDPlot.h"
#include "PacketConverter.h"
#include "../utilities/SocketQueuer.h"
#include "../utilities/colour.h"
#include "../glut_framework/GlutFramework.h"




#include "boost/date_time/posix_time/posix_time.hpp" //include all types plus i/o
//#include <boost/date_time/posix_time/posix_time.hpp>

using namespace glutFramework;
using namespace std;

std::string now_str()
{
    // Get current time from the clock, using microseconds resolution
    const boost::posix_time::ptime now = 
        boost::posix_time::microsec_clock::local_time();

    // Get the time offset in current day
    const boost::posix_time::time_duration td = now.time_of_day();

    //
    // Extract hours, minutes, seconds and milliseconds.
    //
    // Since there is no direct accessor ".milliseconds()",
    // milliseconds are computed _by difference_ between total milliseconds
    // (for which there is an accessor), and the hours/minutes/seconds
    // values previously fetched.
    //
    const long hours        = td.hours();
    const long minutes      = td.minutes();
    const long seconds      = td.seconds();
    const long milliseconds = td.total_milliseconds() -
                              ((hours * 3600 + minutes * 60 + seconds) * 1000);

    //
    // Format like this:
    //
    //      hh:mm:ss.SSS
    //
    // e.g. 02:15:40:321
    //
    //      ^          ^
    //      |          |
    //      123456789*12
    //      ---------10-     --> 12 chars + \0 --> 13 chars should suffice
    //  
    // 
    char buf[40];
    sprintf(buf, "%02ld:%02ld:%02ld.%03ld", 
        hours, minutes, seconds, milliseconds);

    return buf;
}

TwoDPlot::TwoDPlot(int argc, char **argv, char *remote_host,
                    std::set<int> *ports,
                    map<int, char*> *y_axis_labels,
                    map<int, int> *key_to_neuronid_map,
                    map<int, colour> *neuron_id_to_colour_map,
                    float plot_time_ms, float timestep_ms, int n_neurons,
                    DatabaseMessageConnection *database_message_connection) {
    this->window_width = INIT_WINDOW_WIDTH;
    this->window_height = INIT_WINDOW_HEIGHT;
    this->population_width = SIZE_WIDTH;
    this->population_height = SIZE_HEIGHT;
    
    this->y_axis_labels = y_axis_labels;
    this->key_to_neuronid_map = key_to_neuronid_map;
    this->neuron_id_to_colour_map = neuron_id_to_colour_map;
    this->plot_time_ms = plot_time_ms;
    this->timestep_ms = timestep_ms;
    this->n_neurons = n_neurons;
    this->database_message_connection = database_message_connection;
    
    float min_size = window_height < window_width ? window_height: window_width;
    float max_length = population_height > population_width ? population_height: population_width; 
    this->block_size = (float) (min_size - (2 * WINDOW_BORDER))/max_length;

    fprintf(stderr, "n_neurons = %i\n", this->n_neurons);
    fprintf(stderr, "plot time = %f\n", this->plot_time_ms);
    fprintf(stderr, "timestep = %f\n", this->timestep_ms);


    if (pthread_mutex_init(&(this->point_mutex), NULL) == -1) {
        fprintf(stderr, "Error initializing mutex!\n");
        exit(-1);
    }

    for (std::set<int>::iterator iter = ports->begin();
            iter != ports->end(); iter++) {
        int port = *iter;
        printf("listening to port %d", port);
        SocketQueuer *queuer = new SocketQueuer(port, remote_host);
        queuer->start();
        PacketConverter *translater = new PacketConverter(
            queuer, &(this->points_to_draw), &(this->point_mutex),
            this->key_to_neuronid_map);
        translater->start();
    }
    startFramework(argc, argv, "Raster Plot", window_width, window_height,
                INIT_WINDOW_X, INIT_WINDOW_Y, FRAMES_PER_SECOND);
}

void TwoDPlot::init() {
    // setup environment

    glEnable(GL_TEXTURE_2D);
    GLuint texture_id;
    glGenTextures(1, &texture_id);
    glBindTexture(GL_TEXTURE_2D, texture_id);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
    
    
    for (int i=0; i<population_width * population_height * 3; i++)
        img[i] = 0; 

}

//-------------------------------------------------------------------------
//  Draws a string at the specified coordinates.
//-------------------------------------------------------------------------
void TwoDPlot::printgl(float x, float y, void *font_style,
        char* format, ...) {
    va_list arg_list;
    char str[256];
    int i;

    // font options:  GLUT_BITMAP_8_BY_13 GLUT_BITMAP_9_BY_15
    //GLUT_BITMAP_TIMES_ROMAN_10 GLUT_BITMAP_HELVETICA_10
    //GLUT_BITMAP_HELVETICA_12 GLUT_BITMAP_HELVETICA_18
    //GLUT_BITMAP_TIMES_ROMAN_24

    va_start(arg_list, format);
    vsprintf(str, format, arg_list);
    va_end(arg_list);

    glRasterPos2f(x, y);

    for (i = 0; str[i] != '\0'; i++) {
        glutBitmapCharacter(font_style, str[i]);
    }
}

void TwoDPlot::printglstroke(float x, float y, float size, float rotate,
        char* format, ...) {
    va_list arg_list;
    char str[256];
    int i;
    GLvoid *font_style = GLUT_STROKE_ROMAN;

    va_start(arg_list, format);
    vsprintf(str, format, arg_list);
    va_end(arg_list);

    glPushMatrix();
    glEnable (GL_BLEND);   // antialias the font
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glEnable (GL_LINE_SMOOTH);
    glLineWidth(1.5);   // end setup for antialiasing
    glTranslatef(x, y, 0);
    glScalef(size, size, size);
    glRotatef(rotate, 0.0, 0.0, 1.0);
    for (i = 0; str[i] != '\0'; i++) {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, str[i]);
    }
    glDisable(GL_LINE_SMOOTH);
    glDisable(GL_BLEND);
    glPopMatrix();
}

void TwoDPlot::accumSpikes(){
    deque<pair<int, int> >::iterator iter;
    int neuronID = 0;
    int pixel_x = 0;
    int pixel_y = 0;
    int increase = 255;
    while (!points_to_draw.empty())
    {
        iter = points_to_draw.begin();
        neuronID = iter->second;
        //std::cout << "call the first:" << neuronID << "\n";
        points_to_draw.pop_front();
        pixel_x = neuronID / population_width;
        pixel_y = population_width - 1 - neuronID % population_width;
        neuronID = pixel_x * population_width + pixel_y;
        img[neuronID * 3] += increase;
    }
}

void TwoDPlot::drawGrid(){
    glColor3f(1.0f, 1.0f, 1.0f);
    glPushMatrix();
    glTranslatef((window_width - population_height*block_size)/2, WINDOW_BORDER, 0);
    glBegin(GL_LINES);
    for(int row = 0; row <= population_width; row++){
        glVertex2f(0.0f, row*block_size);
        glVertex2f(population_height*block_size, row*block_size);
    }

    for(int col = 0; col <= population_height; col++){
        glVertex2f(col*block_size, 0.0f);
        glVertex2f(col*block_size, population_width*block_size);
    }
    glEnd();
    glPopMatrix();
}

void TwoDPlot::drawSquare(float x, float y, 
                          GLuint r, GLuint g, GLuint b){
    glColor3ub(r, g, b);
    glPushMatrix();
    //glTranslatef((y - population_height)*block_size, (population_width - x)*block_size, 0.0f);
    //glTranslatef((x)*block_size, (y)*block_size, 0.0f);
    glBegin(GL_TRIANGLES);
/*
      glVertex2f(x - half_size, y - half_size);
      glVertex2f(x + half_size, y + half_size);
      glVertex2f(x - half_size, y + half_size);
      
      glVertex2f(x - half_size, y - half_size);
      glVertex2f(x + half_size, y - half_size);
      glVertex2f(x + half_size, y + half_size);
*/
//*
      glVertex2f(x*block_size, y*block_size);
      glVertex2f((x + 1)*block_size, (y + 1)*block_size);
      glVertex2f(x*block_size, (y + 1)*block_size);
      
      glVertex2f(x*block_size , y*block_size);
      glVertex2f((x + 1)*block_size, y*block_size );
      glVertex2f((x + 1)*block_size, (y + 1)*block_size);
/*
      glVertex2f(y, x);
      glVertex2f(y - block_size, x - block_size);
      glVertex2f(y, x - block_size);
      
      glVertex2f(y , x);
      glVertex2f(y - block_size, x );
      glVertex2f(y - block_size, x - block_size);
*/
    glEnd();
    
    glPopMatrix();
}


void TwoDPlot::textureDisplay(){
    char title[] = "2D Plot";
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    printgl((window_width / 2) - 75, window_height - 50,
        GLUT_BITMAP_TIMES_ROMAN_24, title);
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, population_width, population_height, 0, GL_RGB, GL_UNSIGNED_BYTE, img);
    glEnable(GL_TEXTURE_2D);
    glBegin(GL_QUADS);
    
    float height = (float) (window_height - (2 * WINDOW_BORDER));
    float width = (float) (window_width - (2 * WINDOW_BORDER));
    //printf("\nwindow_width: %d\nwindow_height: %d\ndisplay_width: %f\ndisplay_height: %f\nWINDOW_BORDER: %d\n", window_width, window_height, width, height, WINDOW_BORDER);
    glTexCoord2f (0.0, 0.0);
    glVertex3f (WINDOW_BORDER, height, 0.0);
    glTexCoord2f (1.0, 0.0);
        
    glVertex3f (width, height, 0.0);
    glTexCoord2f (1.0, 1.0);
    glVertex3f (width, WINDOW_BORDER, 0.0);
    glTexCoord2f (0.0, 1.0);
      
    glVertex3f (WINDOW_BORDER, WINDOW_BORDER, 0.0);
    glEnd();
    glutSwapBuffers();
        
    //std::cout << now_str() << '\n';   
}


void TwoDPlot::polygonDisplay(){
    float coords[2];
    char title[] = "2D Plot";
    
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    printgl((window_width / 2) - 75, window_height - 50,
            GLUT_BITMAP_TIMES_ROMAN_24, title);

    glPushMatrix();
    int pixel_x =0, pixel_y=0, neuronID=0;
<<<<<<< HEAD
    float red =0, green =0, blue =0;
    glTranslatef( WINDOW_BORDER, WINDOW_BORDER, 0);
=======
    GLuint red =0, green =0, blue =0;
    glTranslatef((window_width - population_width*block_size)/2, WINDOW_BORDER, 0);
>>>>>>> 4ad56210f87414856009147e6977f108fed3fc7c
    for (pixel_x = 0; pixel_x < population_height; pixel_x++)
    {
        for (pixel_y = 0; pixel_y < population_width; pixel_y++)
        {
            neuronID = pixel_x * population_width + pixel_y;
            red = img[neuronID*3 ];
            green = img[neuronID*3 +1];
            blue = img[neuronID* 3+2];
            //turn 90 degree
            drawSquare(pixel_y, population_width - pixel_x, red, green, blue);
            if (red != 0)
                std::cout << "neuronID: " << neuronID << ", spike times: "<< red << "\n";
        }
    }
    drawGrid();
    glPopMatrix();

    
    glutSwapBuffers();
}


void TwoDPlot::display(float time) {
    if (glutGetWindow() == this->window) {
        accumSpikes();
        textureDisplay();       
        //polygonDisplay(); 
    }
}

void TwoDPlot::reshape(int width, int height) {
    if (glutGetWindow() == this->window) {
        fprintf(stderr, "Reshape to %d, %d\n", width, height);
        this->window_width = width;
        this->window_height = height;

        // viewport dimensions
        glViewport(0, 0, (GLsizei) width, (GLsizei) height);
        glMatrixMode (GL_PROJECTION);
        glLoadIdentity();

        // an orthographic projection. Should probably look into OpenGL
        // perspective projections for 3D if that's your thing
        glOrtho(0.0, width, 0.0, height, -50.0, 50.0);
        glMatrixMode (GL_MODELVIEW);
        glLoadIdentity();
    }
}

void TwoDPlot::keyboardUp(unsigned char key, int x, int y) {
    if ((int) key == 13) {
        if (database_message_connection != NULL) {

            // create and send the eieio command message confirming database
            // read
            printf("Starting the simulation\n");
            database_message_connection->send_ready_notification();
            database_message_connection->close_connection();
        }
    }
    if ((int) key == 27) {
        safelyshut();
    }
}

void TwoDPlot::safelyshut(void) {
    exit(0);                // kill program dead
}

TwoDPlot::~TwoDPlot() {
    // TODO Auto-generated destructor stub
}


